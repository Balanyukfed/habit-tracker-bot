import TelegramBot from "node-telegram-bot-api";
import fs from "fs";
import dotenv from "dotenv";
import ExcelJS from "exceljs";
import path from "path";
import cron from "node-cron";

dotenv.config();

const TOKEN = process.env.BOT_TOKEN;

const DB_FILE = "./db.json";

const bot = new TelegramBot(TOKEN, { polling: true });

function readDb() {
  try {
    return JSON.parse(fs.readFileSync(DB_FILE, "utf8"));
  } catch {
    return {};
  }
}

function writeDb(db) {
  fs.writeFileSync(DB_FILE, JSON.stringify(db, null, 2));
}

let db = readDb();

function getTodayDate() {
  const d = new Date();
  return d.toISOString().slice(0, 10);
}

function formatDate(date) {
  return date.toISOString().slice(0, 10);
}

function formatDayMonth(date) {
  const day = date.getDate();
  const month = date.toLocaleString("ru-RU", { month: "long" });
  return `${day} ${month}`;
}

// –§–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–¥.–º–º.–≥–≥–≥–≥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏ –ø–æ–∫–∞–∑–µ)
function formatDisplayDate(dateStr) {
  const d = new Date(dateStr);
  // d.toLocaleDateString —Å —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª—å—é –≤—ã–≤–µ–¥–µ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥
  return d.toLocaleDateString("ru-RU");
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞—Ç –∑–∞ –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –∏–ª–∏ –º–µ—Å—è—Ü (–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π), –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO yyyy-mm-dd
function getPastDates(count, mode = "days") {
  const result = [];
  const now = new Date();

  if (mode === "month") {
    const year = now.getFullYear();
    const month = now.getMonth();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    for (let i = 1; i <= daysInMonth; i++) {
      result.push(formatDate(new Date(year, month, i)));
    }
  } else if (mode === "week") {
    // –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–≤ JS –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=0), —Å—á–∏—Ç–∞–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    const dayOfWeek = now.getDay();
    const mondayOffset = (dayOfWeek + 6) % 7;
    for (let i = 0; i < 7; i++) {
      const d = new Date(now);
      d.setDate(now.getDate() - mondayOffset + i);
      result.push(formatDate(d));
    }
  } else {
    // –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ count –¥–Ω–µ–π (–Ω–∞ –≤—Å—è–∫–∏–π)
    for (let i = 0; i < count; i++) {
      const d = new Date(now);
      d.setDate(now.getDate() - i);
      result.push(formatDate(d));
    }
  }
  return result;
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –¥–ª–∏–Ω–Ω–µ–µ (20 —Å–∏–º–≤–æ–ª–æ–≤)
function calculateProgress(userData, dates) {
  const habits = userData.habits || [];
  const totalPossible = dates.length * habits.length;
  let completed = 0;
  dates.forEach((date) => {
    const done = userData.completed?.[date] || [];
    completed += done.filter((h) => habits.includes(h)).length;
  });
  const percent =
    totalPossible === 0 ? 0 : Math.round((completed / totalPossible) * 100);
  const filledLength = Math.round(percent / 5); // 20 chars total
  const bar = "‚ñì".repeat(filledLength) + "‚ñë".repeat(20 - filledLength);
  return `${bar} ${percent}%`;
}

// –°—Ç–µ–π—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
const waitingForHabit = {};
const waitingForDateInput = {};
const waitingForRename = {}; // –∂–¥—ë—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
const habitToRename = {}; // –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
const userState = {}; // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä progress –∏ —Ç.–ø.)

// –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
function mainKeyboard() {
  return {
    keyboard: [
      ["üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏"],
      ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"],
      ["üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"],
      ["üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"],
      ["üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"],
    ],

    resize_keyboard: true,
    one_time_keyboard: false,
  };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–í—ã–π—Ç–∏"
function exitKeyboard() {
  return {
    keyboard: [["üîô –í—ã–π—Ç–∏"]],
    resize_keyboard: true,
    one_time_keyboard: false,
  };
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±–Ω—É–ª—è–µ–º —Å—Ç–µ–π—Ç—ã
function showMainMenu(chatId) {
  waitingForHabit[chatId] = false;
  waitingForDateInput[chatId] = false;
  userState[chatId] = "main";
  bot.sendMessage(chatId, " –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: mainKeyboard(),
  });
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  db[chatId] = db[chatId] || { habits: [], completed: [], started: false };

  if (!db[chatId].started) {
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"
    bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", {
      reply_markup: {
        keyboard: [["üöÄ –ù–∞—á–∞—Ç—å"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  } else {
    // –£–∂–µ –Ω–∞—á–∏–Ω–∞–ª–∏ ‚Äî —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    showMainMenu(chatId);
  }
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  db[chatId] = db[chatId] || { habits: [], completed: {}, started: false };

  if (!db[chatId].started) {
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏, –∂–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—á–∞—Ç—å"
    if (text === "üöÄ –ù–∞—á–∞—Ç—å") {
      db[chatId].started = true;
      writeDb(db);
      return showMainMenu(chatId);
    } else {
      // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –Ω–∞–ø–æ–º–Ω–∏–º –ø—Ä–æ –∫–Ω–æ–ø–∫—É
      return bot.sendMessage(
        chatId,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.',
        {
          reply_markup: {
            keyboard: [["üöÄ –ù–∞—á–∞—Ç—å"]],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );
    }
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–í—ã–π—Ç–∏" ‚Äî –≤—Å–µ–≥–¥–∞ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  if (text === "üîô –í—ã–π—Ç–∏") {
    return showMainMenu(chatId);
  }

  if (text === "üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É") {
    await sendFullYearStats(chatId);
  }

  // –ï—Å–ª–∏ –∂–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  if (waitingForHabit[chatId]) {
    const habitName = text.trim();
    if (!habitName)
      return bot.sendMessage(
        chatId,
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
        { reply_markup: exitKeyboard() }
      );
    if (db[chatId].habits.includes(habitName))
      return bot.sendMessage(chatId, "–¢–∞–∫–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –µ—Å—Ç—å.", {
        reply_markup: exitKeyboard(),
      });
    db[chatId].habits.push(habitName);
    writeDb(db);
    waitingForHabit[chatId] = false;
    return bot.sendMessage(chatId, `–ü—Ä–∏–≤—ã—á–∫–∞ "${habitName}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, {
      reply_markup: mainKeyboard(),
    });
  }

  // –ñ–¥—ë–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  if (waitingForRename[chatId]) {
    const newName = text.trim();
    const oldName = habitToRename[chatId];
    if (!newName)
      return bot.sendMessage(chatId, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", {
        reply_markup: exitKeyboard(),
      });
    if (db[chatId].habits.includes(newName))
      return bot.sendMessage(chatId, "–¢–∞–∫–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –µ—Å—Ç—å.", {
        reply_markup: exitKeyboard(),
      });

    const habitIndex = db[chatId].habits.indexOf(oldName);
    if (habitIndex !== -1) {
      db[chatId].habits[habitIndex] = newName;

      // –û–±–Ω–æ–≤–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ completed
      for (const date in db[chatId].completed) {
        const day = db[chatId].completed[date];
        const index = day.indexOf(oldName);
        if (index !== -1) {
          day[index] = newName;
        }
      }

      writeDb(db);
      bot.sendMessage(
        chatId,
        `–ü—Ä–∏–≤—ã—á–∫–∞ "${oldName}" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ "${newName}".`,
        { reply_markup: mainKeyboard() }
      );
    } else {
      bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: —Å—Ç–∞—Ä–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", {
        reply_markup: mainKeyboard(),
      });
    }

    waitingForRename[chatId] = false;
    habitToRename[chatId] = null;
    return;
  }

  // –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  if (waitingForDateInput[chatId]) {
    const parts = text.trim().split(".");
    if (parts.length !== 3)
      return bot.sendMessage(chatId, "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –¥–¥.–º–º.–≥–≥–≥–≥", {
        reply_markup: exitKeyboard(),
      });
    const [dd, mm, yyyy] = parts;
    const dateStr = `${yyyy}-${mm.padStart(2, "0")}-${dd.padStart(2, "0")}`;
    const data = db[chatId];
    if (!data.completed[dateStr])
      return bot.sendMessage(chatId, `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${text}`, {
        reply_markup: exitKeyboard(),
      });
    const completed = data.completed[dateStr];
    let result = `–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ ${text}:\n`;
    data.habits.forEach((h) => {
      result += `${completed.includes(h) ? "‚úÖ" : "‚¨úÔ∏è"} ${h}\n`;
    });
    waitingForDateInput[chatId] = false;
    return bot.sendMessage(chatId, result, { reply_markup: mainKeyboard() });
  }

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel
  async function sendFullYearStats(chatId) {
    const data = db[chatId];
    if (!data || !data.habits.length) {
      return bot.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.", {
        reply_markup: mainKeyboard(),
      });
    }

    const now = new Date();
    const year = now.getFullYear();

    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º");

    let currentRow = 1;

    for (let month = 0; month < 12; month++) {
      const monthName = new Date(year, month).toLocaleString("ru-RU", {
        month: "long",
      });

      // –í–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
      sheet.getCell(currentRow, 1).value = monthName;
      sheet.getCell(currentRow, 1).font = { bold: true, size: 14 };
      currentRow++;

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: "–ü—Ä–∏–≤—ã—á–∫–∞", –¥–Ω–∏ –º–µ—Å—è—Ü–∞
      const daysInMonth = new Date(year, month + 1, 0).getDate();
      const headerRow = ["–ü—Ä–∏–≤—ã—á–∫–∞"];
      for (let day = 1; day <= daysInMonth; day++) {
        headerRow.push(day.toString());
      }
      sheet.getRow(currentRow).values = headerRow;

      // –ß—É—Ç—å —Ä–∞—Å—à–∏—Ä–∏–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
      sheet.getColumn(1).width = 30;
      // –ù–∞—Å—Ç—Ä–æ–∏–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–∞—Ç–∞–º–∏ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
      for (let col = 2; col <= daysInMonth + 1; col++) {
        sheet.getColumn(col).width = 3;
        sheet.getColumn(col).alignment = { horizontal: "center" };
      }

      currentRow++;

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
      data.habits.forEach((habit) => {
        const row = [habit];
        for (let day = 1; day <= daysInMonth; day++) {
          const dateStr = `${year}-${String(month + 1).padStart(
            2,
            "0"
          )}-${String(day).padStart(2, "0")}`;
          const doneOnDate = data.completed?.[dateStr] || [];
          row.push(doneOnDate.includes(habit) ? "‚úÖ" : "");
        }
        sheet.getRow(currentRow).values = row;
        currentRow++;
      });

      // –î–æ–±–∞–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
      currentRow++;
    }

    const filePath = path.join("./", `stats_${chatId}_${year}.xlsx`);
    await workbook.xlsx.writeFile(filePath);

    await bot.sendDocument(
      chatId,
      filePath,
      {},
      {
        filename: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_${year}.xlsx`,
        contentType:
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      }
    );

    fs.unlinkSync(filePath);
  }

  switch (text) {
    case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É":
      waitingForHabit[chatId] = true;
      return bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.", {
        reply_markup: exitKeyboard(),
      });

    case "üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏": {
      const data = db[chatId];
      if (!data.habits.length)
        return bot.sendMessage(chatId, "–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.", {
          reply_markup: mainKeyboard(),
        });

      const today = getTodayDate();
      const completedToday = data.completed?.[today] || [];
      const buttons = data.habits.map((h) => [
        {
          text: (completedToday.includes(h) ? "‚úÖ " : "‚¨úÔ∏è ") + h,
          callback_data: `toggle_${h}`,
        },
      ]);
      const weekDates = getPastDates(7, "week");
      const monthDates = getPastDates(null, "month");
      const week = calculateProgress(data, weekDates);
      const month = calculateProgress(data, monthDates);
      const todayFormatted = formatDayMonth(new Date());

      const messageText = `üìÖ –°–µ–≥–æ–¥–Ω—è: ${todayFormatted}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n–ó–∞ –Ω–µ–¥–µ–ª—é: ${week}\n–ó–∞ –º–µ—Å—è—Ü:  ${month}`;

      return bot.sendMessage(chatId, messageText, {
        reply_markup: {
          inline_keyboard: buttons,
        },
      });
    }

    case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É": {
      const data = db[chatId];
      if (!data.habits.length)
        return bot.sendMessage(chatId, "–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", {
          reply_markup: mainKeyboard(),
        });

      const buttons = data.habits.map((h) => [
        {
          text: `‚úèÔ∏è ${h}`,
          callback_data: `rename_${h}`,
        },
      ]);

      bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", {
        reply_markup: { inline_keyboard: buttons },
      });

      return bot.sendMessage(chatId, '–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ "–í—ã–π—Ç–∏".', {
        reply_markup: exitKeyboard(),
      });
    }

    case "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É": {
      const data = db[chatId];
      if (!data.habits.length)
        return bot.sendMessage(chatId, "–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.", {
          reply_markup: mainKeyboard(),
        });
      const buttons = data.habits.map((h) => [
        {
          text: h,
          callback_data: `delete_${h}`,
        },
      ]);
      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–º–µ–Ω–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏"
      bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", {
        reply_markup: { inline_keyboard: buttons },
      });
      // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤—ã–π—Ç–∏ –Ω–∏–∂–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
      return bot.sendMessage(chatId, '–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ "–í—ã–π—Ç–∏"', {
        reply_markup: exitKeyboard(),
      });
    }

    case "üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
      userState[chatId] = "progress";
      return bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", {
        reply_markup: {
          keyboard: [
            ["üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", "üóì –ó–∞ –º–µ—Å—è—Ü", "üìÜ –ó–∞ –¥–µ–Ω—å"],
            ["üîô –í—ã–π—Ç–∏"],
          ],
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      });

    case "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é":
      return sendVerticalStats(chatId, "week");

    case "üóì –ó–∞ –º–µ—Å—è—Ü":
      return sendVerticalStats(chatId, "month");

    case "üìÜ –ó–∞ –¥–µ–Ω—å":
      waitingForDateInput[chatId] = true;
      return bot.sendMessage(chatId, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:", {
        reply_markup: exitKeyboard(),
      });
  }
});

function sendVerticalStats(chatId, mode) {
  const data = db[chatId];
  const dates = getPastDates(null, mode);
  const habits = data.habits;

  if (habits.length === 0) {
    return bot.sendMessage(chatId, "–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.", {
      reply_markup: mainKeyboard(),
    });
  }

  let text = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${mode === "week" ? "–Ω–µ–¥–µ–ª—é" : "–º–µ—Å—è—Ü"}:\n\n`;

  dates.forEach((date) => {
    const done = data.completed?.[date] || [];
    const displayDate = formatDisplayDate(date);
    text += `üìÖ ${displayDate}\n`;
    habits.forEach((h) => {
      text += (done.includes(h) ? "‚úÖ" : "‚¨úÔ∏è") + " " + h + "\n";
    });
    text += "\n"; // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
  });

  bot.sendMessage(chatId, text, { reply_markup: exitKeyboard() });
}

function sendTable(chatId, mode) {
  const data = db[chatId];
  const dates = getPastDates(null, mode);
  const habits = data.habits;
  let text = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${mode === "week" ? "–Ω–µ–¥–µ–ª—é" : "–º–µ—Å—è—Ü"}:\n\n`;
  text += "–î–∞—Ç–∞       " + habits.map((h) => h.slice(0, 5)).join(" | ") + "\n";
  dates.forEach((date) => {
    const done = data.completed?.[date] || [];
    const row = habits
      .map((h) => (done.includes(h) ? "‚úÖ" : "‚¨úÔ∏è"))
      .join("   ");
    const displayDate = formatDisplayDate(date);
    text += `${displayDate} ${row}\n`;
  });
  bot.sendMessage(chatId, text, { reply_markup: exitKeyboard() });
}

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const userData = db[chatId];
  userData.completed = userData.completed || {};

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è "–í—ã–π—Ç–∏" –≤ callback - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  // (–ù–æ —É —Ç–µ–±—è callback - —ç—Ç–æ —Ç–æ–ª—å–∫–æ toggle/delete, –≤—ã—Ö–æ–¥–∞ —Ç–∞–º –Ω–µ—Ç, —Ç.–∫. –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ - –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)

  if (data.startsWith("toggle_")) {
    const habit = data.replace("toggle_", "");
    const today = getTodayDate();
    userData.completed[today] = userData.completed[today] || [];
    const idx = userData.completed[today].indexOf(habit);
    if (idx === -1) {
      userData.completed[today].push(habit);
    } else {
      userData.completed[today].splice(idx, 1);
    }
    writeDb(db);
    bot.answerCallbackQuery(query.id, `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${habit}`);

    // –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫ —Å–µ–≥–æ–¥–Ω—è
    const todayCompleted = userData.completed[today];
    const buttons = userData.habits.map((h) => [
      {
        text: (todayCompleted.includes(h) ? "‚úÖ " : "‚¨úÔ∏è ") + h,
        callback_data: `toggle_${h}`,
      },
    ]);

    // –ü–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞
    const weekDates = getPastDates(null, "week");
    const monthDates = getPastDates(null, "month");
    const weekProgress = calculateProgress(userData, weekDates);
    const monthProgress = calculateProgress(userData, monthDates);

    const newText = `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n–ó–∞ –Ω–µ–¥–µ–ª—é: ${weekProgress}\n–ó–∞ –º–µ—Å—è—Ü:  ${monthProgress}`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ç–µ–∫—Å—Ç, –∏ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    bot.editMessageText(newText, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: {
        inline_keyboard: buttons,
      },
    });
  }

  if (data.startsWith("rename_")) {
    const habit = data.replace("rename_", "");
    waitingForRename[chatId] = true;
    habitToRename[chatId] = habit;
    bot.answerCallbackQuery(query.id);
    return bot.sendMessage(
      chatId,
      `–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ "${habit}"`,
      { reply_markup: exitKeyboard() }
    );
  }

  if (data.startsWith("delete_")) {
    const habit = data.replace("delete_", "");
    const idx = userData.habits.indexOf(habit);
    if (idx !== -1) {
      userData.habits.splice(idx, 1);
      // –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ completed –ø–æ –≤—Å–µ–º –¥–∞—Ç–∞–º
      for (const date in userData.completed) {
        userData.completed[date] = userData.completed[date].filter(
          (h) => h !== habit
        );
      }
      writeDb(db);
      bot.answerCallbackQuery(query.id, `–ü—Ä–∏–≤—ã—á–∫–∞ "${habit}" —É–¥–∞–ª–µ–Ω–∞`);
      // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
      if (userData.habits.length === 0) {
        bot.editMessageText("–ü—Ä–∏–≤—ã—á–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", {
          chat_id: chatId,
          message_id: query.message.message_id,
        });
      } else {
        const buttons = userData.habits.map((h) => [
          {
            text: h,
            callback_data: `delete_${h}`,
          },
        ]);
        bot.editMessageReplyMarkup(
          { inline_keyboard: buttons },
          { chat_id: chatId, message_id: query.message.message_id }
        );
      }
    } else {
      bot.answerCallbackQuery(query.id, "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
  }
});

cron.schedule("30 7 * * *", () => {
  console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º");

  for (const chatId in db) {
    const data = db[chatId];
    if (!data.habits || data.habits.length === 0) continue;

    const today = getTodayDate();
    const completedToday = data.completed?.[today] || [];
    const buttons = data.habits.map((h) => [
      {
        text: (completedToday.includes(h) ? "‚úÖ " : "‚¨úÔ∏è ") + h,
        callback_data: `toggle_${h}`,
      },
    ]);
    const weekDates = getPastDates(7, "week");
    const monthDates = getPastDates(null, "month");
    const week = calculateProgress(data, weekDates);
    const month = calculateProgress(data, monthDates);
    const todayFormatted = formatDayMonth(new Date());

    const messageText = `üìÖ –°–µ–≥–æ–¥–Ω—è: ${todayFormatted}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n–ó–∞ –Ω–µ–¥–µ–ª—é: ${week}\n–ó–∞ –º–µ—Å—è—Ü:  ${month}`;

    bot.sendMessage(chatId, messageText, {
      reply_markup: {
        inline_keyboard: buttons,
      },
    });
  }
});
